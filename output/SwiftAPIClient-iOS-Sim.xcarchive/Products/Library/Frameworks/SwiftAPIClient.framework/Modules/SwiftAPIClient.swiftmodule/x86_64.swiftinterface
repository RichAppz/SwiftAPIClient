// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SwiftAPIClient
import CommonCrypto
import CryptoKit
import Foundation
import Swift
import SystemConfiguration
import _Concurrency
public let kUnauthorisedRequest: Foundation.Notification.Name
extension Foundation.Data {
  public var string: Swift.String? {
    get
  }
  public var json: [Swift.String : Any]? {
    get
  }
  public var jsonArray: [[Swift.String : Any]]? {
    get
  }
}
@_hasMissingDesignatedInitializers public class CoderModule {
  public static var decoder: Foundation.JSONDecoder
  public static var encoder: Foundation.JSONEncoder
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SecureService {
  public static func encryptToString(_ data: Foundation.Data) throws -> Swift.String?
  public static func AESEncryptToData(_ data: Foundation.Data) throws -> Foundation.Data?
  public static func AESDecrypt(_ string: Swift.String) throws -> Foundation.Data?
  public static func AESDecrypt(_ data: Foundation.Data) throws -> Foundation.Data?
  @objc deinit
}
public enum FileManagerError : Swift.Error {
  case documentDirectoryMissing
  case plistNotSaved
  case deletionFailed
  public static func == (a: SwiftAPIClient.FileManagerError, b: SwiftAPIClient.FileManagerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Movie : SwiftAPIClient.Model {
  public let title: Swift.String?
  public let year: Swift.String?
  public let rated: Swift.String?
  public let genre: Swift.String?
  public static var storageIdentifier: Swift.String {
    get
  }
  public static var identifier: Swift.String {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RequestModel {
  public init(endpoint: Swift.String = "", endpointParams: [Any]? = nil, params: [Swift.String : Any] = [:], storageType: SwiftAPIClient.StorageType = .none, storageKeyAddition: Swift.String? = nil, notification: Foundation.Notification.Name? = nil)
}
public typealias OperationResponse = (SwiftAPIClient.Response) -> Swift.Void
public enum ServiceRequestError : Swift.Error {
  case authenticationFailed
  case authenticationNotRequired
  case hasNoConnection
  public static func == (a: SwiftAPIClient.ServiceRequestError, b: SwiftAPIClient.ServiceRequestError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum HTTPMethod : Swift.String {
  case get
  case delete
  case post
  case put
  case patch
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol Service {
  var rootURL: Swift.String { get }
  var headers: [Swift.String : Swift.String] { get set }
  var networkQueue: Foundation.OperationQueue { get }
  func get(_ request: SwiftAPIClient.Request, completion: SwiftAPIClient.OperationResponse?)
  func post(_ request: SwiftAPIClient.Request, completion: SwiftAPIClient.OperationResponse?)
  func delete(_ request: SwiftAPIClient.Request, completion: SwiftAPIClient.OperationResponse?)
  func put(_ request: SwiftAPIClient.Request, completion: SwiftAPIClient.OperationResponse?)
  func patch(_ request: SwiftAPIClient.Request, completion: SwiftAPIClient.OperationResponse?)
}
extension SwiftAPIClient.Service {
  public func makeRequest(_ method: SwiftAPIClient.HTTPMethod, request: SwiftAPIClient.Request, completion: SwiftAPIClient.OperationResponse? = nil)
}
public protocol NetworkObserver : AnyObject {
  func networkAvailabilityChanged()
}
@_hasMissingDesignatedInitializers public class NetworkStatusService {
  public static var hasConnection: Swift.Bool {
    get
  }
  public class func startObservingNetworkChanges(_ newObserver: SwiftAPIClient.NetworkObserver)
  public class func stopObservingNetworkChanges(_ observer: SwiftAPIClient.NetworkObserver)
  @objc deinit
}
public struct Response {
  public let data: Foundation.Data?
  public let fileStoreUrl: Foundation.URL?
  public let headers: [Swift.String : Any]?
  public let error: Swift.Error?
  public init(data: Foundation.Data?, fileStoreUrl: Foundation.URL? = nil, headers: [Swift.String : Any]?, error: Swift.Error?)
}
extension SwiftAPIClient.Service {
  public func stdGetRequest<T>(_ request: SwiftAPIClient.RequestModel, completion: SwiftAPIClient.ModelObjectCompletionBlock<T>? = nil) where T : SwiftAPIClient.Model
  public func stdGetRequest<T>(_ request: SwiftAPIClient.RequestModel, completion: SwiftAPIClient.ModelArrayCompletionBlock<T>? = nil) where T : SwiftAPIClient.Model
  public func stdPostRequest<T>(_ request: SwiftAPIClient.RequestModel, completion: SwiftAPIClient.ModelObjectCompletionBlock<T>? = nil) where T : SwiftAPIClient.Model
  public func stdPostRequest<T>(_ request: SwiftAPIClient.RequestModel, completion: SwiftAPIClient.ModelArrayCompletionBlock<T>? = nil) where T : SwiftAPIClient.Model
  public func stdDeleteRequest(_ request: SwiftAPIClient.RequestModel, completion: ((Swift.Error?) -> Swift.Void)? = nil)
  public func stdPutRequest(_ request: SwiftAPIClient.RequestModel, completion: ((Swift.Error?) -> Swift.Void)? = nil)
}
public let kPlistFilename: Swift.String
public let kRequestErrorDomain: Swift.String
public class ThreadSafeArray<Element> {
  public init()
  convenience public init(_ array: [Element])
  @objc deinit
}
extension SwiftAPIClient.ThreadSafeArray {
  public var first: Element? {
    get
  }
  public var last: Element? {
    get
  }
  public var count: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
extension SwiftAPIClient.ThreadSafeArray {
  public func first(where predicate: (Element) -> Swift.Bool) -> Element?
  public func last(where predicate: (Element) -> Swift.Bool) -> Element?
  public func filter(_ isIncluded: @escaping (Element) -> Swift.Bool) -> [Element]?
  public func index(where predicate: (Element) -> Swift.Bool) -> Swift.Int?
  public func sorted(by areInIncreasingOrder: (Element, Element) -> Swift.Bool) -> [Element]?
  public func map<ElementOfResult>(_ transform: @escaping (Element) -> ElementOfResult) -> [ElementOfResult]
  public func compactMap<ElementOfResult>(_ transform: (Element) -> ElementOfResult?) -> [ElementOfResult]
  public func reduce<ElementOfResult>(_ initialResult: ElementOfResult, _ nextPartialResult: @escaping (ElementOfResult, Element) -> ElementOfResult) -> ElementOfResult
  public func reduce<ElementOfResult>(into initialResult: ElementOfResult, _ updateAccumulatingResult: @escaping (inout ElementOfResult, Element) -> Swift.Void) -> ElementOfResult
  public func forEach(_ body: (Element) -> Swift.Void)
  public func contains(where predicate: (Element) -> Swift.Bool) -> Swift.Bool
  public func allSatisfy(_ predicate: (Element) -> Swift.Bool) -> Swift.Bool
}
extension SwiftAPIClient.ThreadSafeArray {
  public func append(_ element: Element)
  public func append(_ elements: [Element])
  public func insert(_ element: Element, at index: Swift.Int)
  public func remove(at index: Swift.Int, completion: ((Element) -> Swift.Void)? = nil)
  public func remove(where predicate: @escaping (Element) -> Swift.Bool, completion: (([Element]) -> Swift.Void)? = nil)
  public func removeAll(completion: (([Element]) -> Swift.Void)? = nil)
}
extension SwiftAPIClient.ThreadSafeArray {
  public subscript(index: Swift.Int) -> Element? {
    get
    set
  }
}
extension SwiftAPIClient.ThreadSafeArray where Element : Swift.Equatable {
  public func contains(_ element: Element) -> Swift.Bool
}
extension SwiftAPIClient.ThreadSafeArray {
  public static func += (left: inout SwiftAPIClient.ThreadSafeArray<Element>, right: Element)
  public static func += (left: inout SwiftAPIClient.ThreadSafeArray<Element>, right: [Element])
}
extension Swift.String {
  public static func fullPath(endpoint: Swift.String? = nil, endpointParams: [Any]? = nil) -> Swift.String
  public var asURL: Foundation.URL? {
    get
  }
  public var ccSHA256: Swift.String? {
    get
  }
}
extension Swift.Dictionary {
  public var jsonString: Swift.String? {
    get
  }
  public var data: Foundation.Data? {
    get
  }
}
extension Swift.Array {
  public var data: Foundation.Data? {
    get
  }
}
extension Foundation.DateFormatter {
  public static let iso8601Full: Foundation.DateFormatter
}
public struct FileUpload {
  public let data: Foundation.Data
  public let paramName: Swift.String
  public let fullFileName: Swift.String
  public let mimeType: Swift.String
}
public enum ReachabilityError : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
}
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
public class Reachability {
  public typealias NetworkReachable = (SwiftAPIClient.Reachability) -> Swift.Void
  public typealias NetworkUnreachable = (SwiftAPIClient.Reachability) -> Swift.Void
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: SwiftAPIClient.Reachability.NetworkStatus, b: SwiftAPIClient.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: SwiftAPIClient.Reachability.NetworkReachable?
  public var whenUnreachable: SwiftAPIClient.Reachability.NetworkUnreachable?
  public var reachableOnWWAN: Swift.Bool
  public var currentReachabilityString: Swift.String {
    get
  }
  public var currentReachabilityStatus: SwiftAPIClient.Reachability.NetworkStatus {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability)
  convenience public init?(hostname: Swift.String)
  convenience public init?()
  @objc deinit
}
extension SwiftAPIClient.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  public var isReachable: Swift.Bool {
    get
  }
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
public enum RequestError : Swift.Int, Swift.Error {
  case badRequest
  case unauthorised
  case userDisabled
  case notFound
  case methodNotAllowed
  case serverError
  case noConnection
  case timeOutError
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum NetworkOperationType {
  case standard
  case fileDownload
  public static func == (a: SwiftAPIClient.NetworkOperationType, b: SwiftAPIClient.NetworkOperationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Model : Swift.Decodable, Swift.Encodable {
  static var storageIdentifier: Swift.String { get }
}
open class Request {
  open var rootUrl: Swift.String?
  open var operationType: SwiftAPIClient.NetworkOperationType
  open var endpoint: Swift.String
  open var parameters: [Swift.String : Any]?
  open var upload: SwiftAPIClient.FileUpload?
  open var priority: Foundation.Operation.QueuePriority
  open var qualityOfService: Foundation.QualityOfService
  public init(endpoint: Swift.String = "", operationType: SwiftAPIClient.NetworkOperationType = .standard, parameters: [Swift.String : Any]? = nil, upload: SwiftAPIClient.FileUpload? = nil, priority: Foundation.Operation.QueuePriority? = .high, qualityOfService: Foundation.QualityOfService? = .default)
  @objc deinit
}
public enum CryptoError : Swift.Error {
  case KeyError((Swift.String, Swift.Int))
  case IVError((Swift.String, Swift.Int))
  case CryptorError((Swift.String, Swift.Int))
}
@_hasMissingDesignatedInitializers public class Crypto {
  public class var newKey: Swift.String {
    get
  }
  @objc deinit
}
extension Foundation.Data {
  public func cryptoEncodeToString(key: Swift.String) throws -> Swift.String?
  public func cryptoEncodeToData(key: Swift.String) throws -> Foundation.Data?
  public func cryptoDecode(key: Swift.String) throws -> Foundation.Data?
}
extension Swift.String {
  public func cryptoDecode(key: Swift.String) throws -> Foundation.Data?
}
public typealias ModelObjectCompletionBlock<T> = (T?, Swift.Error?) -> Swift.Void where T : SwiftAPIClient.Model
public typealias ModelArrayCompletionBlock<T> = ([T]?, Swift.Error?) -> Swift.Void where T : SwiftAPIClient.Model
public struct Closure<T> : Swift.Equatable where T : SwiftAPIClient.Model {
  public let id: Swift.String
  public let blockObj: SwiftAPIClient.ModelObjectCompletionBlock<T>?
  public let blockArr: SwiftAPIClient.ModelArrayCompletionBlock<T>?
  public static func == (lhs: SwiftAPIClient.Closure<T>, rhs: SwiftAPIClient.Closure<T>) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class ClosureService {
  public var store: SwiftAPIClient.ThreadSafeArray<Any>
  public static let shared: SwiftAPIClient.ClosureService
  @objc deinit
}
public enum StorageType {
  case userDefaults, fileManager, none
  public static func == (a: SwiftAPIClient.StorageType, b: SwiftAPIClient.StorageType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum StorageClientError : Swift.Error {
  case fileManagerFailure
  case noDataAvailable
  public static func == (a: SwiftAPIClient.StorageClientError, b: SwiftAPIClient.StorageClientError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class StorageClient {
  public static func map<T>(object: Foundation.Data?, storageKey: Swift.String? = nil, storageType: SwiftAPIClient.StorageType = .fileManager) throws -> [T]? where T : SwiftAPIClient.Model
  public static func map<T>(object: Foundation.Data?, storageKey: Swift.String? = nil, storageType: SwiftAPIClient.StorageType = .fileManager) throws -> T? where T : SwiftAPIClient.Model
  public static func remove(model: SwiftAPIClient.Model.Type, completion: (() -> Swift.Void)? = nil)
  public static func clear() throws
  public static func retrieve<T>(storageKey: Swift.String? = nil, completion: (([T]?) -> Swift.Void)) throws where T : SwiftAPIClient.Model
  public static func retrieve<T>(storageKey: Swift.String? = nil, completion: ((T?) -> Swift.Void)) throws where T : SwiftAPIClient.Model
  public static func remove<T>(objectType: T?, storageKey: Swift.String? = nil) throws where T : SwiftAPIClient.Model
  public static func remove<T>(objectType: [T]?, storageKey: Swift.String? = nil) throws where T : SwiftAPIClient.Model
  @objc deinit
}
extension Swift.Array where Element : SwiftAPIClient.Model {
  public func save(storageKey: Swift.String? = nil, storageType: SwiftAPIClient.StorageType = .fileManager) throws
}
extension Swift.Optional where Wrapped : SwiftAPIClient.Model {
  public func save(storageKey: Swift.String? = nil, storageType: SwiftAPIClient.StorageType = .fileManager) throws
}
extension SwiftAPIClient.Model {
  public func save(storageKey: Swift.String? = nil, storageType: SwiftAPIClient.StorageType = .fileManager) throws
}
extension Swift.Error {
  public var code: Swift.Int {
    get
  }
  public var isConnectionError: Swift.Bool {
    get
  }
}
extension SwiftAPIClient.FileManagerError : Swift.Equatable {}
extension SwiftAPIClient.FileManagerError : Swift.Hashable {}
extension SwiftAPIClient.ServiceRequestError : Swift.Equatable {}
extension SwiftAPIClient.ServiceRequestError : Swift.Hashable {}
extension SwiftAPIClient.HTTPMethod : Swift.Equatable {}
extension SwiftAPIClient.HTTPMethod : Swift.Hashable {}
extension SwiftAPIClient.HTTPMethod : Swift.RawRepresentable {}
extension SwiftAPIClient.Reachability.NetworkStatus : Swift.Equatable {}
extension SwiftAPIClient.Reachability.NetworkStatus : Swift.Hashable {}
extension SwiftAPIClient.RequestError : Swift.Equatable {}
extension SwiftAPIClient.RequestError : Swift.Hashable {}
extension SwiftAPIClient.RequestError : Swift.RawRepresentable {}
extension SwiftAPIClient.NetworkOperationType : Swift.Equatable {}
extension SwiftAPIClient.NetworkOperationType : Swift.Hashable {}
extension SwiftAPIClient.StorageType : Swift.Equatable {}
extension SwiftAPIClient.StorageType : Swift.Hashable {}
extension SwiftAPIClient.StorageClientError : Swift.Equatable {}
extension SwiftAPIClient.StorageClientError : Swift.Hashable {}
